{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "type": "object",
    "$id": "hat_reaction-config",
    "description": "Settings for HAT reaction plugin",
    "additionalProperties": false,
    "properties": {
      "arrhenius_equation": {
        "title": "arrhenius_equation",
        "type": "object",
        "description": "For setting values in the arrhenius equation",
        "properties": {
          "frequency_factor": {
            "type": "float",
            "description": "Frequency factor",
            "pytype": "float",
            "minimum": 0,
            "default": 0.288
          },
          "temperature": {
            "type": "float",
            "description": "Temperature",
            "pytype": "float",
            "minimum": 0,
            "default": 300
          }       
        },
        "required": [ "frequency_factor", "temperature" ],
        "additionalProperties": false
      },
      "h_cutoff": {
        "type": "float",
        "description": "Cutoff for H atom",
        "pytype": "float",
        "default": 3
      },
      "model": {
        "type": "string",
        "description": "Model name, optional",
        "pytype": "str",
        "default": null
      },
      "ensemble_size": {
        "type": "integer",
        "description": "Number of models to use, defaults to all, optional",
        "pytype": "int",
        "default": null
      },
      "prediction_scheme": {
        "type": "string",
        "description": "How to predict the reaction barrier. Current options: `efficient`, `all_models`. `efficient` first predicts the barriers with one model, and if a barrier is sufficiently low, recalculates it with the complete ensemble. In the `all_models` scheme, for all reactions the whole ensemble prediction is used.",
        "pytype": "str",
        "enum": ["all_models", "efficient"],
        "default": "efficient"
      },
      "polling_rate": {
        "type": "integer",
        "description": "Polling rate, defaults to 10",
        "pytype": "int",
        "default": 10
      },
      "radicals": {
        "type": "integer",
        "description": "Radical index, usually supplied through kimmdy, optional",
        "pytype": "int",
        "default": null
      },
      "change_coords": {
        "type": "string",
        "description": "How to change coordinates. H can be placed at the new position, or a (lambda)-dynamics simulation can be performed. For lambda-dynamics, set up the coordinate changer with slow_growth=True",
        "pytype": "str",
        "enum": ["place","lambda"],
        "default": "place"
      },
      "kmc": {
        "description": "KMC algorithm for this reaction. Default: extrande_mod",
        "type": "string",
        "pytype": "str",
        "enum": ["rfkmc", "frm", "extrande", "extrande_mod"],
        "default": "extrande_mod"
      },
      "keep_structures": {
        "description": "For each reaction a structure is generated. If true, those are kept on disk, otherwise they are only kept in case of a failure. Default: False",
        "type": "boolean",
        "pytype": "bool",
        "default": false
      }
    },
    "required": ["frequency_factor"]
  }
    
